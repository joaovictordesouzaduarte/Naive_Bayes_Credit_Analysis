# -*- coding: utf-8 -*-
"""Understanding Matplotlib.pyplot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mjEgDoy6_gdMUJZ1ORQ7m1LjnQ_Q1mBV
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

#Gráfico simples
plt.plot([1,2,3,4], [5,4,3,2])
plt.ylabel('y numbers')
plt.xlabel('x numbers')
plt.show()



#Para par que eu adicionar de x e y, poderei adicionar um novo argumento que é o formato da linha.
plt.plot([1,2,3], [3,2,1], 'ro')
plt.ylabel('y numbers2')
plt.xlabel('x numbers2')
plt.show()

data = {'a': np.arange(50),
        'c': np.random.randint(0, 50, 50),
        'd': np.random.randn(50)}
data['b'] = data['a'] + 10 * np.random.randn(50)
data['d'] = np.abs(data['d']) * 100

plt.scatter('a', 'b', c='c', s='d', data=data)
plt.xlabel('entry a')
plt.ylabel('entry b')
plt.show()

#Plotando variáveis categóricas
data1 = ['group_a','group_b', 'group_c' ]
data_values = [100, 200, 1000]
plt.figure(figsize = (9,3))

plt.subplot(131)

plt.bar(data1, data_values, color = 'pink')

plt.subplot(132)

plt.plot(data1, data_values)

plt.subplot(133)
plt.scatter(data1, data_values)

plt.suptitle('Categorical Plotting')

#Linewidth ajusta a largura da linha do gráfico
plt.plot([1,2,3], [3,2,1], linewidth=2.0)

x = [500,1000,3000]
y = 5,10,200
line, = plt.plot(x, y, '-')
line.set_antialiased(False)

#Podemos também utilizar o método .setp para "settar" uma lista de objetos ou um objeto apenas
x1 = [5,4,3]
y1 = ['amor', 'paixão', 'ódio']
x2 = [200,300,400]
y2 = ['desespero', 'paz', 'calma']
lines = plt.plot(x1,y1,x2,y2)

#Use keywords args
plt.setp(lines, color = 'r', linewidth = 3.0)

#Ou use MATLAB style string value pairs
plt.setp(lines, 'color','r', 'linewidth', 2.0)

#Working with multiple figures and axes

def f(t):
    return np.exp(-t) * np.cos(2*np.pi*t)

t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)

plt.figure()
plt.subplot(211) # 2 = duas linhas; 1 = numero de colunas , 1 = números de plots
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')

plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()
plt.suptitle('Multiple Axes')

def f(t):
    return np.exp(-t) * np.cos(2*np.pi*t)



t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)

plt.figure()
plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')


plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()

mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)

# the histogram of the data
n, bins, patches = plt.hist(x, 50, density=1, facecolor='g', alpha=0.75)


plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
plt.axis([40, 160, 0, 0.03])
plt.grid(True)
plt.show()

mu, sigma = 200, 15
x = mu + sigma *np.random.randn(10000)

n, bins, patches = plt.hist(x, 50, density= 1, facecolor = 'b', alpha=0.75)

plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.grid(True)
plt.text(60, .025, r'$\mu = 200, \ \sigma = 15$')
plt.axis([130, 280, 0, 0.025])

